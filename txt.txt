سأقوم بشرح الأكواد الواردة بالتفصيل، مقسمة حسب الأقسام الواردة في الكود:

---

### 1. **Header Sticky** (شريط القوائم الثابت أثناء التمرير)
- وظيفة هذا الجزء من الكود هي جعل شريط القوائم ثابتًا عند التمرير (scroll) بحيث لا يختفي.
- عندما يتم التمرير أكثر من 100 بكسل، يتم إضافة **class "sticky"** إلى العنصر الذي يحتوي على `class="header-main"`.
- إذا كان التمرير أقل من 100 بكسل، يتم إزالة هذا **class**.
```javascript
$(window).on('scroll', function(event) {    
    var scroll = $(window).scrollTop();
    if (scroll <= 100) {
        $(".header-main").removeClass("sticky");
    } else{
        $(".header-main").addClass("sticky");
    }
});
```

---

### 2. **Menu Active** (تمييز العنصر النشط في القائمة)
- يتم التحقق من الرابط الحالي (`window.location.pathname`) ومقارنته مع الروابط الموجودة في عناصر القائمة.
- إذا كان رابط العنصر يطابق الرابط الحالي للصفحة، يتم إضافة **class "active"** للعنصر.
```javascript
$(function () {
    var url = window.location.pathname; 
    var activePage = url.substring(url.lastIndexOf('/') + 1); 
    $('.nav-menu li a').each(function () { 
        var linkPage = this.href.substring(this.href.lastIndexOf('/') + 1); 
        if (activePage == linkPage) { 
            $(this).closest("li").addClass("active"); 
        }
    });
});
```

---

### 3. **Menu Script** (قائمة الجوال والتنقل بين القوائم الفرعية)
- **فتح القائمة الجانبية (Mobile Menu):**
  - عند الضغط على زر القائمة `.menu-toggle`، يتم عرض قائمة الجوال بإضافة **class "open"** إلى عناصر القائمة والـ `overlay`.
- **إغلاق القائمة:**
  - عند الضغط على زر الإغلاق `.menu-close` أو على الـ `.overlay` يتم إزالة **class "open"**.
- **القوائم الفرعية:**
  - يضيف الزر `mobile-menu-expand` لتوسيع القوائم الفرعية.
  - القوائم الفرعية مغلقة بشكل افتراضي باستخدام `slideUp()` ويتم فتحها عند النقر.
```javascript
$('.menu-toggle').on('click', function(){
    $('.mobile-menu').addClass('open')
    $('.overlay').addClass('open')
});
$('.menu-close, .overlay').on('click', function(){
    $('.mobile-menu').removeClass('open')
    $('.overlay').removeClass('open')
});
```

---

### 4. **Magnific Popup** (عرض النوافذ المنبثقة)
- تُستخدم مكتبة **Magnific Popup** لعرض مقاطع الفيديو والصور بطريقة جميلة وتفاعلية.
- يدعم هذا الجزء عرض الصور كمجموعة (Gallery) أو تشغيل الفيديوهات عبر iframe.
```javascript
$('.video-popup').magnificPopup({
    type: 'iframe'
});
$('.image-popup').magnificPopup({
    type: 'image',
    gallery: {
        enabled: true
    }
});
```

---

### 5. **Swiper Sliders** (التعامل مع السلايدر)
- يتم استخدام مكتبة **Swiper.js** لعرض سلايدر للمحتوى (مثل الدورات، المراجعات، الشعارات).
- تحتوي كل سلايدر على إعدادات مثل:
  - **speed**: سرعة التنقل بين الشرائح.
  - **spaceBetween**: المسافة بين الشرائح.
  - **slidesPerView**: عدد الشرائح المرئية في العرض.
  - **autoplay**: لتشغيل الشرائح تلقائيًا.
- يتم تخصيص إعدادات بناءً على أحجام الشاشات المختلفة باستخدام **breakpoints**.
```javascript
var edule = new Swiper('.courses-active .swiper-container', {
    speed: 600,
    spaceBetween: 30,
    navigation: {
        nextEl: '.courses-active .swiper-button-next',
        prevEl: '.courses-active .swiper-button-prev',
    },
    breakpoints: {
        0: { slidesPerView: 1 },
        768: { slidesPerView: 3 },
        1200: { slidesPerView: 5 }
    },
});
```

---

### 6. **Rating Script** (نظام التقييم بالنجوم)
- يتم استخدام نظام النجوم للتقييم.
- عند تمرير الماوس على النجوم، يتم تمييز النجوم حتى القيمة التي يُشير إليها الماوس.
- عند النقر، يتم تثبيت التقييم.
```javascript
$("#rating li").on('mouseover', function(){
    var onStar = parseInt($(this).data('value'), 10);
    $(this).siblings().each(function() {
        if ($(this).data('value') <= onStar) {
            $(this).find('i').addClass('hover');
        } else {
            $(this).find('i').removeClass('hover');
        }
    });
});
$('#rating li').on('click', function(){
    var onStar = parseInt($(this).data('value'), 10);
    $(this).siblings().each(function(){
        if ($(this).data('value') <= onStar) {
            $(this).find('i').addClass('star').removeClass('fa-star-o');
        } else {
            $(this).find('i').addClass('fa-star-o').removeClass('star');
        }
    });
});
```

---

### 7. **Back to Top** (الرجوع إلى الأعلى)
- يعرض زر الرجوع إلى الأعلى عندما يتم التمرير أكثر من 600 بكسل.
- عند النقر عليه، يتم التمرير بسلاسة إلى أعلى الصفحة.
```javascript
$(window).on('scroll', function () {
    if ($(this).scrollTop() > 600) {
        $('.back-to-top').fadeIn(200);
    } else {
        $('.back-to-top').fadeOut(200);
    }
});
$('.back-to-top').on('click', function (event) {
    event.preventDefault();
    $('html, body').animate({ scrollTop: 0 }, 1500);
});
```

---

### الهدف العام من الكود:
- إنشاء موقع ديناميكي يحتوي على ميزات متقدمة:
  - شريط قوائم ثابت.
  - قائمة مخصصة للجوال.
  - نوافذ منبثقة للصور والفيديوهات.
  - سلايدر للمحتوى.
  - نظام تقييم.
  - تحسين تجربة المستخدم من خلال زر الرجوع للأعلى.

إذا كنت بحاجة لمزيد من التوضيحات عن أي جزء، يمكنني شرحه بشكل أعمق!



#####################################################################################################
تعلم لغة **جافا سكربت (JavaScript)** يعد من المهارات الأساسية لأي مطور ويب. إليك خطوات مفصلة تساعدك على تعلم **JavaScript** بشكل فعال:

---

### **1. الأساسيات:**
ابدأ بتعلم **أساسيات JavaScript**، مثل:
- **المتغيرات (Variables)**: كيف يتم تعريف المتغيرات باستخدام `let`, `const`, و `var`.
- **الأنواع البيانية (Data Types)**: الأعداد (`Number`), النصوص (`String`), القيم البوليانية (`Boolean`), المصفوفات (`Array`), والكائنات (`Object`).
- **الشروط والحلقات (Conditions and Loops)**: `if`, `else`, `switch`, و الحلقات مثل `for`, `while`.
- **الدوال (Functions)**: كيفية تعريف واستدعاء الدوال في JavaScript.
- **التعامل مع الأخطاء (Error Handling)**: `try`, `catch`, و `finally`.

**الموارد المقترحة**:
- [MDN Web Docs: JavaScript Basics](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction)
- [W3Schools: JavaScript Tutorial](https://www.w3schools.com/js/)

---

### **2. تعلم المفاهيم المتقدمة:**
بعد إتقان الأساسيات، اتجه نحو المفاهيم الأكثر تعقيدًا:
- **البرمجة الكائنية (OOP)**: تعلم كيف تنشئ الكائنات (`Objects`) والفئات (`Classes`).
- **الوعد (Promises) و `async/await`**: كيفية التعامل مع العمليات غير المتزامنة.
- **التعامل مع DOM**: كيف تتفاعل مع HTML عبر JavaScript، مثل إضافة أو إزالة عناصر أو التعامل مع الأحداث (`Events`).
- **التوجيه (Routing) في التطبيقات أحادية الصفحة (SPA)**: إذا كنت تستخدم **React** أو **Vue**، سيكون فهم **التوجيه** مهمًا.

**الموارد المقترحة**:
- [Eloquent JavaScript](https://eloquentjavascript.net/): كتاب ممتاز للمبتدئين والمطورين المتقدمين.
- [JavaScript.info](https://javascript.info/): موقع شامل يعرض دروسًا مفصلة عن JavaScript.

---

### **3. المشاريع العملية:**
أفضل طريقة لتطبيق ما تعلمته هي من خلال إنشاء **مشاريع حقيقية**:
- **الآلات الحاسبة**: بناء آلة حاسبة باستخدام JavaScript.
- **تطبيق To-Do List**: لتخزين المهام باستخدام الذاكرة المحلية.
- **المتصفحات التفاعلية**: استخدام **HTML** و **CSS** مع **JavaScript** لإنشاء واجهات تفاعلية.
  
**الموارد المقترحة**:
- [freeCodeCamp](https://www.freecodecamp.org/): يقدم تحديات ومشاريع عملية لتطبيق ما تعلمته.

---

### **4. العمل مع المكتبات والأطر (Libraries and Frameworks):**
- **React.js**: إطار عمل لبناء واجهات المستخدم التفاعلية.
- **Vue.js**: إطار عمل آخر شائع لتطوير تطبيقات الويب الحديثة.
- **Node.js**: بيئة لتشغيل JavaScript على الخوادم، وهي ضرورية لإنشاء تطبيقات الويب من الجهة الخلفية.
  
**الموارد المقترحة**:
- [React Official Docs](https://reactjs.org/docs/getting-started.html)
- [Node.js Official Docs](https://nodejs.org/en/docs/)

---

### **5. تعلم من خلال الفيديوهات والدورات:**
- **YouTube**: القنوات مثل **Traversy Media** و **The Net Ninja** تقدم دروسًا ممتازة للمبتدئين.
- **دورات على منصات مثل Udemy و Coursera**: ابحث عن دورات مع تقييمات عالية مثل **The Complete JavaScript Course 2023** على Udemy.

---

### **6. الممارسة المستمرة والتفاعل مع المجتمع:**
- **التفاعل مع المجتمع**: انضم إلى منتديات مثل **Stack Overflow** و **Reddit**، حيث يمكنك طرح الأسئلة والحصول على إجابات.
- **GitHub**: قم بالمشاركة في مشاريع مفتوحة المصدر لترى كيفية كتابة الكود بشكل احترافي.

---

### **7. تجنب الأخطاء الشائعة:**
- **الخلط بين `==` و `===`**: `===` يقارن القيم والنوع بشكل صارم.
- **التعامل مع المصفوفات والأشياء بشكل خاطئ**: تأكد من استخدام الأساليب الصحيحة لتعديل المصفوفات والأشياء.

---

### **8. البقاء محدثًا:**
تعتبر JavaScript لغة سريعة التغيير، لذا من المهم متابعة الأخبار والتحديثات:
- متابعة المدونات مثل **JavaScript Weekly**.
- الاشتراك في مواقع مثل **Dev.to** و **Medium** للبقاء على اطلاع بأحدث التطورات في JavaScript.

---

**الخلاصة:**
تعلم **JavaScript** يتطلب استمرارية وتجربة عملية. البداية تكون من الأساسيات، ثم التوسع في المفاهيم المتقدمة، وبعد ذلك التطبيق على مشاريع حقيقية. من خلال ممارسة البرمجة بشكل مستمر، ستتمكن من أن تصبح مطورًا محترفًا في هذه اللغة.


######################################################################################################################################################
هذا الكود مكتوب باستخدام مكتبة **jQuery** مع استخدام بعض الإضافات والمكتبات الأخرى مثل **Swiper.js** و**Magnific Popup**. الهدف منه هو تقديم ميزات تفاعلية للموقع الإلكتروني، مثل شريط قوائم ثابت، قائمة جانبية، النوافذ المنبثقة، السلايدرز، نظام التقييم بالنجوم، وزر الرجوع إلى الأعلى. سأشرح الكود بالتفصيل بناءً على الأقسام المختلفة:

---

### 1. **Header Sticky (شريط القوائم الثابت أثناء التمرير)**
- **الهدف**: تثبيت شريط القوائم عند التمرير.
- **الكود**:
  ```javascript
  $(window).on('scroll', function(event) {    
      var scroll = $(window).scrollTop();
      if (scroll <= 100) {
          $(".header-main").removeClass("sticky");
      } else{
          $(".header-main").addClass("sticky");
      }
  });
  ```
- **الشرح**:
  - يتم مراقبة حدث التمرير (**scroll**) على نافذة المتصفح.
  - إذا كان المستخدم قام بالتمرير لمسافة أقل من 100 بكسل:
    - يتم إزالة **class "sticky"** من العنصر ذو `class="header-main"`.
  - إذا كانت المسافة أكبر من 100 بكسل:
    - يتم إضافة **class "sticky"** لجعل شريط القوائم ثابتًا.

---

### 2. **Menu Active (تمييز العنصر النشط في القائمة)**
- **الهدف**: تحديد العنصر النشط في شريط القوائم بناءً على الرابط الحالي.
- **الكود**:
  ```javascript
  $(function () {
      var url = window.location.pathname; 
      var activePage = url.substring(url.lastIndexOf('/') + 1); 
      $('.nav-menu li a').each(function () { 
          var linkPage = this.href.substring(this.href.lastIndexOf('/') + 1); 
          if (activePage == linkPage) { 
              $(this).closest("li").addClass("active"); 
          }
      });
  });
  ```
- **الشرح**:
  - يتم استخراج مسار الصفحة الحالي باستخدام `window.location.pathname`.
  - يتم مقارنة هذا المسار مع كل الروابط الموجودة في القائمة.
  - إذا تطابق الرابط مع الرابط الحالي:
    - يتم إضافة **class "active"** إلى العنصر.

---

### 3. **Menu Script (قائمة الجوال والتنقل بين القوائم الفرعية)**

#### **فتح وإغلاق قائمة الجوال:**
- **الكود**:
  ```javascript
  $('.menu-toggle').on('click', function(){
      $('.mobile-menu').addClass('open')
      $('.overlay').addClass('open')
  });
  
  $('.menu-close, .overlay').on('click', function(){
      $('.mobile-menu').removeClass('open')
      $('.overlay').removeClass('open')
  });
  ```
- **الشرح**:
  - عند الضغط على الزر `.menu-toggle`:
    - يتم عرض القائمة الجانبية (إضافة **class "open"**).
  - عند الضغط على زر الإغلاق `.menu-close` أو الضغط على المنطقة المظللة `.overlay`:
    - يتم إغلاق القائمة الجانبية.

#### **القوائم الفرعية:**
- **الكود**:
  ```javascript
  var $offCanvasNavSubMenu = $offCanvasNav.find('.sub-menu');
  $offCanvasNavSubMenu.parent().prepend('<span class="mobile-menu-expand"></span>');
  $offCanvasNavSubMenu.slideUp();
  ```
- **الشرح**:
  - يتم إضافة زر لتوسيع القوائم الفرعية (**mobile-menu-expand**).
  - القوائم الفرعية مغلقة افتراضيًا باستخدام `slideUp()`.
  - عند الضغط على العنصر الفرعي، يتم فتحه أو إغلاقه باستخدام `slideDown()` و`slideUp()`.

---

### 4. **Magnific Popup (عرض النوافذ المنبثقة)**
- **الهدف**: عرض الصور أو الفيديوهات كنوافذ منبثقة.
- **الكود**:
  ```javascript
  $('.video-popup').magnificPopup({
      type: 'iframe'
  });

  $('.image-popup').magnificPopup({
      type: 'image',
      gallery: {
        enabled: true
      }
  });
  ```
- **الشرح**:
  - يتم استخدام مكتبة **Magnific Popup**:
    - لعرض الفيديوهات عبر iframe.
    - لعرض الصور كمعرض مع إمكانية التنقل بينها.

---

### 5. **Swiper Sliders (التعامل مع السلايدرز)**

#### **مثال على سلايدر الدورات:**
- **الكود**:
  ```javascript
  var edule = new Swiper('.courses-active .swiper-container', {
      speed: 600,
      spaceBetween: 30,        
      navigation: {
          nextEl: '.courses-active .swiper-button-next',
          prevEl: '.courses-active .swiper-button-prev',
      },       
      breakpoints: {
          0: { slidesPerView: 1 },
          576: { slidesPerView: 2 },
          768: { slidesPerView: 3 },
          992: { slidesPerView: 4 },
          1200: { slidesPerView: 5 }
      },
  });
  ```
- **الشرح**:
  - يتم استخدام مكتبة **Swiper.js** لإنشاء سلايدرز.
  - يتم تخصيص إعدادات العرض حسب حجم الشاشة باستخدام **breakpoints**.

---

### 6. **Rating Script (نظام التقييم بالنجوم)**
- **الهدف**: إنشاء نظام تقييم تفاعلي.
- **الكود**:
  ```javascript
  $("#rating li").on('mouseover', function(){
      var onStar = parseInt($(this).data('value'), 10);
      ...
  });
  
  $('#rating li').on('click', function(e) {
      var onStar = parseInt($(this).data('value'), 10);
      ...
  });
  ```
- **الشرح**:
  - عند تمرير الماوس على النجوم:
    - يتم تمييز النجوم حتى النجمة التي يتم الإشارة إليها.
  - عند النقر:
    - يتم تثبيت التقييم وتغيير شكل النجوم.

---

### 7. **Back to Top (الرجوع إلى الأعلى)**
- **الهدف**: إظهار زر للرجوع إلى أعلى الصفحة.
- **الكود**:
  ```javascript
  $(window).on('scroll', function (event) {
      if ($(this).scrollTop() > 600) {
          $('.back-to-top').fadeIn(200)
      } else {
          $('.back-to-top').fadeOut(200)
      }
  });

  $('.back-to-top').on('click', function (event) {
      event.preventDefault();
      $('html, body').animate({ scrollTop: 0 }, 1500);
  });
  ```
- **الشرح**:
  - إذا كان التمرير أكبر من 600 بكسل:
    - يظهر الزر تدريجيًا باستخدام `fadeIn()`.
  - عند الضغط عليه:
    - يتم التمرير بسلاسة إلى الأعلى باستخدام `animate()`.

---

### **الخلاصة**:
هذا الكود يهدف إلى تحسين تجربة المستخدم في الموقع عبر توفير ميزات متقدمة مثل القوائم التفاعلية، النوافذ المنبثقة، السلايدرز، ونظام التقييم بالنجوم.

###################################################################################################################


هناك العديد من أكواد **JavaScript** المفيدة التي يمكن أن تساعد في تصميم تطبيقات ويب تفاعلية وحديثة. سأعرض لك بعضًا من **أفضل الأكواد/التقنيات** التي يمكنك استخدامها مع الشرح:

---

### 1. **التعامل مع DOM بشكل ديناميكي**
- **الوصف**: تغيير محتوى الصفحات وإضافة عناصر بشكل ديناميكي.
- **الكود**:
  ```javascript
  // إضافة عنصر جديد إلى الصفحة
  const newElement = document.createElement('div');
  newElement.textContent = 'عنصر جديد';
  newElement.classList.add('my-class');
  document.body.appendChild(newElement);

  // تعديل عنصر موجود
  const heading = document.querySelector('h1');
  heading.textContent = 'تم تعديل النص';
  heading.style.color = 'blue';
  ```
- **الفائدة**: يساعد في إنشاء محتوى ديناميكي دون الحاجة لإعادة تحميل الصفحة.

---

### 2. **إظهار وإخفاء العناصر**
- **الوصف**: إظهار أو إخفاء العناصر بسهولة بناءً على الأحداث.
- **الكود**:
  ```javascript
  const button = document.querySelector('.toggle-btn');
  const element = document.querySelector('.content');

  button.addEventListener('click', () => {
      element.classList.toggle('hidden'); // يضيف أو يزيل الـ class
  });
  ```
- **CSS المطلوب**:
  ```css
  .hidden {
      display: none;
  }
  ```
- **الفائدة**: يجعل التطبيق أكثر تفاعلية وسهولة في الاستخدام.

---

### 3. **التعامل مع الـ Local Storage**
- **الوصف**: حفظ البيانات محليًا في المتصفح لاسترجاعها لاحقًا.
- **الكود**:
  ```javascript
  // تخزين البيانات
  localStorage.setItem('username', 'JohnDoe');

  // استرجاع البيانات
  const username = localStorage.getItem('username');
  console.log(username);

  // حذف البيانات
  localStorage.removeItem('username');
  ```
- **الفائدة**: تخزين إعدادات المستخدم أو البيانات دون الحاجة إلى خادم.

---

### 4. **عمل رسوم متحركة بسيطة (Animation)**
- **الوصف**: تحريك العناصر باستخدام JavaScript.
- **الكود**:
  ```javascript
  const box = document.querySelector('.box');
  let position = 0;

  function moveBox() {
      if (position < 300) {
          position++;
          box.style.transform = `translateX(${position}px)`;
          requestAnimationFrame(moveBox); // يحافظ على السلاسة
      }
  }

  moveBox();
  ```
- **CSS المطلوب**:
  ```css
  .box {
      width: 50px;
      height: 50px;
      background: red;
      position: absolute;
  }
  ```
- **الفائدة**: تحسين تجربة المستخدم بإضافة تأثيرات مرئية سلسة.

---

### 5. **إنشاء Modal Popup**
- **الوصف**: نافذة منبثقة تفاعلية.
- **الكود**:
  ```javascript
  const openModal = document.querySelector('.open-modal');
  const closeModal = document.querySelector('.close-modal');
  const modal = document.querySelector('.modal');

  openModal.addEventListener('click', () => {
      modal.style.display = 'block';
  });

  closeModal.addEventListener('click', () => {
      modal.style.display = 'none';
  });

  window.addEventListener('click', (e) => {
      if (e.target === modal) {
          modal.style.display = 'none';
      }
  });
  ```
- **HTML المطلوب**:
  ```html
  <button class="open-modal">افتح النافذة</button>
  <div class="modal">
      <div class="modal-content">
          <span class="close-modal">&times;</span>
          <p>هذا هو المحتوى</p>
      </div>
  </div>
  ```
- **CSS المطلوب**:
  ```css
  .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
  }
  .modal-content {
      background: #fff;
      margin: 10% auto;
      padding: 20px;
      width: 50%;
  }
  .close-modal {
      float: right;
      cursor: pointer;
  }
  ```
- **الفائدة**: إنشاء نوافذ منبثقة خفيفة وسهلة الاستخدام.

---

### 6. **تحقق من صحة النماذج (Form Validation)**
- **الوصف**: التحقق من صحة المدخلات قبل الإرسال.
- **الكود**:
  ```javascript
  const form = document.querySelector('#myForm');

  form.addEventListener('submit', (e) => {
      const email = document.querySelector('#email');
      const password = document.querySelector('#password');

      if (!email.value.includes('@')) {
          alert('يرجى إدخال بريد إلكتروني صحيح');
          e.preventDefault();
      }

      if (password.value.length < 6) {
          alert('كلمة المرور يجب أن تكون أطول من 6 أحرف');
          e.preventDefault();
      }
  });
  ```
- **HTML المطلوب**:
  ```html
  <form id="myForm">
      <input type="email" id="email" placeholder="البريد الإلكتروني" required />
      <input type="password" id="password" placeholder="كلمة المرور" required />
      <button type="submit">إرسال</button>
  </form>
  ```
- **الفائدة**: تحسين أمان التطبيق وسرعة التفاعل مع المستخدم.

---

### 7. **تطبيق Drag and Drop**
- **الوصف**: سحب وإفلات العناصر.
- **الكود**:
  ```javascript
  const item = document.querySelector('.draggable');
  const container = document.querySelector('.dropzone');

  item.addEventListener('dragstart', () => {
      item.classList.add('dragging');
  });

  item.addEventListener('dragend', () => {
      item.classList.remove('dragging');
  });

  container.addEventListener('dragover', (e) => {
      e.preventDefault();
      const dragging = document.querySelector('.dragging');
      container.appendChild(dragging);
  });
  ```
- **HTML المطلوب**:
  ```html
  <div class="dropzone" style="border: 2px dashed #ccc; padding: 20px;">
      <div class="draggable" draggable="true" style="padding: 10px; background: lightblue;">اسحبني</div>
  </div>
  ```
- **الفائدة**: يضيف تفاعلًا متقدمًا للمستخدمين.

---

### 8. **Ajax Requests باستخدام Fetch API**
- **الوصف**: إرسال واستقبال البيانات دون تحديث الصفحة.
- **الكود**:
  ```javascript
  fetch('https://jsonplaceholder.typicode.com/posts')
      .then(response => response.json())
      .then(data => {
          console.log(data);
      })
      .catch(error => {
          console.error('حدث خطأ:', error);
      });
  ```
- **الفائدة**: تنفيذ عمليات جلب البيانات أو إرسالها إلى الخادم بشكل ديناميكي.

---

### 9. **إنشاء عداد تنازلي**
- **الوصف**: عد تنازلي للوقت.
- **الكود**:
  ```javascript
  function countdown(duration) {
      const timer = setInterval(() => {
          console.log(duration);
          duration--;
          if (duration < 0) {
              clearInterval(timer);
              console.log('الوقت انتهى!');
          }
      }, 1000);
  }

  countdown(10); // عد تنازلي من 10 ثوانٍ
  ```
- **الفائدة**: إنشاء مكونات تعتمد على الوقت مثل المؤقتات.

---

### 10. **زر تحميل المزيد (Load More Button)**
- **الوصف**: تحميل محتوى إضافي عند النقر.
- **الكود**:
  ```javascript
  const loadMoreBtn = document.querySelector('.load-more');
  let items = 5;

  loadMoreBtn.addEventListener('click', () => {
      const hiddenItems = document.querySelectorAll('.item.hidden');
      for (let i = 0; i < items && hiddenItems[i]; i++) {
          hiddenItems[i].classList.remove('hidden');
      }
  });
  ```
- **HTML المطلوب**:
  ```html
  <div class="items">
      <div class="item">عنصر 1</div>
      <div class="item hidden">عنصر 2</div>
      <div class="item hidden">عنصر 3</div>
  </div>
  <button class="load-more">تحميل المزيد</button>
  ```
- **CSS المطلوب**:
  ```css
  .hidden {
      display: none;
  }
  ```
- **الفائدة**: تحسين تجربة المستخدم عند تصفح كميات كبيرة من المحتوى.

---

### **الخلاصة**:
هذه الأكواد تغطي أغلب الميزات الشائعة والمفيدة التي يمكن تضمينها في التطبيقات التفاعلية. اختر الأنسب وفقًا لاحتياجاتك وطبيعة تطبيقك!



**JavaScript** هي واحدة من أشهر لغات البرمجة وأكثرها استخدامًا في تطوير تطبيقات الويب. تعمل في الغالب على المتصفح، وهي السبب الرئيسي لجعل صفحات الويب ديناميكية وتفاعلية. فيما يلي شرح أساسي لـ JavaScript:

---

## **1. ما هي JavaScript؟**
JavaScript (JS) هي لغة برمجة:
- **ديناميكية**: يمكنها تحديث المحتوى على صفحة الويب دون إعادة تحميلها.
- **كائنية التوجه (OOP)**: تدعم البرمجة بالكائنات.
- **خفيفة الوزن**: مصممة لتعمل بسرعة على المتصفحات.
- **متعددة الاستخدامات**: يمكن استخدامها في تطوير واجهات المستخدم، الخوادم (باستخدام Node.js)، وحتى تطبيقات الهواتف الذكية.

---

## **2. كيف تعمل JavaScript في المتصفح؟**
JavaScript تعمل داخل **محرك JavaScript** الموجود في المتصفح. على سبيل المثال:
- **Google Chrome** يستخدم محرك V8.
- **Mozilla Firefox** يستخدم محرك SpiderMonkey.

عند تحميل صفحة ويب، يقوم المتصفح بتنفيذ الأكواد المكتوبة داخل **علامة `<script>`** أو الملفات المرتبطة مثل `.js`.

---

## **3. كتابة أول كود JavaScript**
### **أمثلة بسيطة:**
#### إضافة JavaScript في صفحة HTML:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <title>مرحبًا JavaScript</title>
</head>
<body>
    <h1>مرحبًا!</h1>
    <script>
        console.log("مرحبًا بك في JavaScript!");
    </script>
</body>
</html>
```
- **النتيجة**: عند فتح الصفحة، يظهر النص "مرحبًا بك في JavaScript!" في **أداة المطور (Console)**.

#### ملف JavaScript خارجي:
يمكنك فصل الكود في ملف مستقل:
```html
<script src="script.js"></script>
```
وفي الملف `script.js`:
```javascript
console.log("هذا كود من ملف خارجي!");
```

---

## **4. الميزات الأساسية لـ JavaScript**

### **(أ) المتغيرات (Variables)**
المتغيرات تستخدم لتخزين البيانات.
#### أمثلة:
```javascript
let name = "أحمد"; // يمكن تغييره
const age = 25;   // ثابت لا يتغير
var city = "القاهرة"; // قديم ولكنه ما زال يعمل
console.log(name, age, city);
```

---

### **(ب) الأنواع الأساسية (Data Types)**
1. **أرقام (Numbers)**: 
    ```javascript
    let num = 42;
    ```
2. **نصوص (Strings)**: 
    ```javascript
    let text = "مرحبًا!";
    ```
3. **منطقي (Booleans)**: 
    ```javascript
    let isReady = true; // إما true أو false
    ```
4. **قائمة (Arrays)**: 
    ```javascript
    let colors = ["أحمر", "أخضر", "أزرق"];
    ```
5. **كائن (Object)**:
    ```javascript
    let person = { name: "أحمد", age: 30 };
    ```

---

### **(ج) الشروط (Conditions)**
الشروط تتحكم في تدفق البرنامج:
```javascript
let age = 18;

if (age >= 18) {
    console.log("مرحبًا بك، يمكنك الدخول.");
} else {
    console.log("عذرًا، الدخول غير مسموح.");
}
```

---

### **(د) الحلقات (Loops)**
تساعد في تكرار الكود:
#### حلقة **for**:
```javascript
for (let i = 0; i < 5; i++) {
    console.log(`العدد: ${i}`);
}
```
#### حلقة **while**:
```javascript
let count = 0;
while (count < 3) {
    console.log(count);
    count++;
}
```

---

### **(هـ) الدوال (Functions)**
الدوال تُستخدم لتجميع أكواد يمكن استدعاؤها لاحقًا.
#### تعريف واستدعاء دالة:
```javascript
function sayHello(name) {
    console.log(`مرحبًا، ${name}!`);
}
sayHello("أحمد"); // النتيجة: مرحبًا، أحمد!
```

#### دالة سهمية (Arrow Function):
```javascript
const add = (a, b) => a + b;
console.log(add(3, 4)); // النتيجة: 7
```

---

## **5. التفاعل مع المستخدم (DOM Manipulation)**
JavaScript تجعل الصفحات ديناميكية من خلال التفاعل مع **DOM (Document Object Model)**.

#### مثال لتغيير محتوى HTML:
```html
<h1 id="title">مرحبًا بك</h1>
<button id="changeBtn">اضغط هنا</button>

<script>
    const button = document.getElementById("changeBtn");
    const title = document.getElementById("title");

    button.addEventListener("click", () => {
        title.textContent = "تم تغيير النص!";
    });
</script>
```
- **عند الضغط على الزر، يتغير نص العنوان إلى "تم تغيير النص!".**

---

## **6. الميزات المتقدمة**
### **(أ) الجلب Fetch API**
إجراء طلبات HTTP دون تحديث الصفحة:
```javascript
fetch('https://jsonplaceholder.typicode.com/posts')
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.error('حدث خطأ:', error));
```

### **(ب) الأحداث (Events)**
التفاعل مع نقرات المستخدم:
```javascript
document.querySelector("button").addEventListener("click", () => {
    alert("تم الضغط على الزر!");
});
```

### **(ج) الكائنات الكائنية (OOP)**
يمكنك إنشاء كائنات مخصصة:
```javascript
class Car {
    constructor(brand, color) {
        this.brand = brand;
        this.color = color;
    }

    drive() {
        console.log(`${this.brand} باللون ${this.color} تسير الآن!`);
    }
}

const myCar = new Car("تويوتا", "أبيض");
myCar.drive(); // النتيجة: تويوتا باللون أبيض تسير الآن!
```

---

## **7. استخدامات JavaScript**
1. **إنشاء واجهات المستخدم التفاعلية** (مثل القوائم، الرسوم المتحركة).
2. **إجراء طلبات للخادم** (عبر تقنيات مثل AJAX أو Fetch API).
3. **تطوير التطبيقات الخلفية (Back-end)** باستخدام Node.js.
4. **تطوير تطبيقات الهواتف المحمولة** باستخدام منصات مثل React Native.
5. **تطوير الألعاب** عبر المكتبات مثل Three.js.

---

### **8. لماذا JavaScript؟**
- **سهلة التعلم**: مناسبة للمبتدئين.
- **شاملة**: تُستخدم في الواجهة الأمامية والخلفية.
- **مجتمع ضخم**: العديد من المكتبات والإطارات (مثل React وVue.js وAngular).

---

إذا كنت بحاجة إلى شرح أو أمثلة أعمق لأي جزء، لا تتردد في السؤال! 😊

********************************************************************************************************************
**إنشاء واجهات المستخدم التفاعلية** هو أحد الجوانب الرئيسية لاستخدام JavaScript. يمكن من خلالها تحسين تجربة المستخدم بإضافة القوائم التفاعلية، الرسوم المتحركة، والنماذج الديناميكية. فيما يلي شرح مفصل مع أمثلة:

---

## **1. إنشاء قوائم تفاعلية (Dynamic Menus)**

### **مثال: قائمة جانبية (Sidebar Menu)**
#### الكود:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>قائمة جانبية تفاعلية</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .sidebar {
            width: 250px;
            height: 100%;
            background-color: #333;
            color: #fff;
            position: fixed;
            left: -250px;
            transition: all 0.3s ease;
        }
        .sidebar.open {
            left: 0;
        }
        .sidebar ul {
            list-style: none;
            padding: 0;
        }
        .sidebar ul li {
            padding: 15px;
            cursor: pointer;
        }
        .sidebar ul li:hover {
            background-color: #444;
        }
        .toggle-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="toggle-btn">☰ فتح القائمة</div>
    <div class="sidebar">
        <ul>
            <li>الرئيسية</li>
            <li>من نحن</li>
            <li>الخدمات</li>
            <li>تواصل معنا</li>
        </ul>
    </div>

    <script>
        const toggleBtn = document.querySelector(".toggle-btn");
        const sidebar = document.querySelector(".sidebar");

        toggleBtn.addEventListener("click", () => {
            sidebar.classList.toggle("open");
        });
    </script>
</body>
</html>
```

#### **كيف يعمل؟**
1. عند الضغط على الزر **☰ فتح القائمة**، يتم إضافة أو إزالة **class "open"**.
2. **CSS Transition** يضيف تأثير انزلاق سلس عند فتح القائمة أو إغلاقها.

---

## **2. الرسوم المتحركة (Animations)**

### **مثال: إنشاء مربع يتحرك عند النقر**
#### الكود:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تحريك مربع</title>
    <style>
        .box {
            width: 100px;
            height: 100px;
            background-color: #4CAF50;
            position: relative;
            transition: all 0.5s ease;
        }
    </style>
</head>
<body>
    <div class="box"></div>

    <script>
        const box = document.querySelector(".box");

        box.addEventListener("click", () => {
            const randomX = Math.floor(Math.random() * 500);
            const randomY = Math.floor(Math.random() * 500);
            box.style.transform = `translate(${randomX}px, ${randomY}px)`;
        });
    </script>
</body>
</html>
```

#### **كيف يعمل؟**
1. عند النقر على المربع، يتم تغيير موقعه باستخدام `transform: translate(x, y)`.
2. تأثير الحركة يتم بواسطة خاصية CSS **`transition`**.

---

## **3. النماذج التفاعلية (Dynamic Forms)**

### **مثال: التحقق من نموذج إدخال المستخدم**
#### الكود:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>التحقق من النموذج</title>
    <style>
        input {
            display: block;
            margin-bottom: 10px;
            padding: 8px;
            width: 300px;
        }
        .error {
            color: red;
            font-size: 14px;
        }
        .success {
            color: green;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <h1>التحقق من النموذج</h1>
    <form id="form">
        <label>البريد الإلكتروني:</label>
        <input type="email" id="email" placeholder="أدخل بريدك الإلكتروني">
        <span class="error" id="error-msg"></span>
        <button type="submit">إرسال</button>
    </form>

    <script>
        const form = document.getElementById("form");
        const email = document.getElementById("email");
        const errorMsg = document.getElementById("error-msg");

        form.addEventListener("submit", (e) => {
            e.preventDefault(); // منع إرسال النموذج
            if (!email.value.includes("@")) {
                errorMsg.textContent = "يرجى إدخال بريد إلكتروني صحيح!";
            } else {
                errorMsg.textContent = "تم إرسال النموذج بنجاح!";
                errorMsg.classList.add("success");
                errorMsg.classList.remove("error");
            }
        });
    </script>
</body>
</html>
```

#### **كيف يعمل؟**
1. يتم التحقق من أن البريد يحتوي على "@".
2. إذا كان الإدخال غير صحيح، يظهر رسالة خطأ.
3. إذا كان صحيحًا، تظهر رسالة نجاح.

---

## **4. التفاعل مع الصور (Image Gallery)**

### **مثال: معرض صور تفاعلي**
#### الكود:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>معرض صور</title>
    <style>
        .gallery img {
            width: 100px;
            height: 100px;
            margin: 5px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        .gallery img:hover {
            transform: scale(1.2);
        }
        .large {
            width: 300px;
            height: 300px;
            margin: 20px auto;
            display: block;
        }
    </style>
</head>
<body>
    <h1>معرض الصور</h1>
    <img class="large" src="https://via.placeholder.com/300" alt="الصورة الكبيرة">
    <div class="gallery">
        <img src="https://via.placeholder.com/100" alt="صورة 1">
        <img src="https://via.placeholder.com/100/ff0000" alt="صورة 2">
        <img src="https://via.placeholder.com/100/00ff00" alt="صورة 3">
        <img src="https://via.placeholder.com/100/0000ff" alt="صورة 4">
    </div>

    <script>
        const largeImage = document.querySelector(".large");
        const gallery = document.querySelectorAll(".gallery img");

        gallery.forEach(img => {
            img.addEventListener("click", () => {
                largeImage.src = img.src;
            });
        });
    </script>
</body>
</html>
```

#### **كيف يعمل؟**
1. عند النقر على صورة صغيرة، يتم تحديث الصورة الكبيرة.
2. **CSS Hover Effect** يجعل الصور الصغيرة تكبر عند تمرير الماوس عليها.

---

## **5. إنشاء زر الرجوع إلى الأعلى (Back to Top Button)**

#### الكود:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>الرجوع إلى الأعلى</title>
    <style>
        #back-to-top {
            position: fixed;
            bottom: 20px;
            right: 20px;
            display: none;
            padding: 10px 15px;
            background: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <h1>مرحبًا بك!</h1>
    <p>قم بالتمرير لأسفل لرؤية الزر.</p>
    <div style="height: 2000px;"></div>
    <button id="back-to-top">↑ أعلى</button>

    <script>
        const backToTop = document.getElementById("back-to-top");

        window.addEventListener("scroll", () => {
            if (window.scrollY > 500) {
                backToTop.style.display = "block";
            } else {
                backToTop.style.display = "none";
            }
        });

        backToTop.addEventListener("click", () => {
            window.scrollTo({ top: 0, behavior: "smooth" });
        });
    </script>
</body>
</html>
```

#### **كيف يعمل؟**
1. يظهر الزر عند التمرير لأكثر من 500 بكسل.
2. عند الضغط على الزر، يتم التمرير بسلا



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
تصميم شريط القوائم (Navigation Bar) لموقع مثل **"مرصد الحروب"** يعتمد على تقديم المعلومات الأساسية وتنظيمها بطريقة تسهّل على المستخدم الوصول إلى المحتوى. 

### **العناصر التي يُفضل وضعها في شريط القوائم:**

1. **الرئيسية**:  
   - رابط إلى الصفحة الرئيسية للموقع.
   - الهدف: تسهيل العودة إلى البداية.

2. **الأخبار والتقارير**:  
   - قسم يعرض أحدث الأخبار والتقارير المتعلقة بالحروب والصراعات.
   - يمكن تقسيمه إلى:
     - أخبار عاجلة.
     - تحليلات وتقارير.
     - خرائط وأحداث.

3. **الدراسات والأبحاث**:  
   - قسم مخصص لتقارير تحليلية معمقة.
   - مثال: دراسات حول أسباب الحروب، الإحصائيات، والنزاعات الجغرافية.

4. **الخرائط التفاعلية**:  
   - عرض خرائط للمناطق المتأثرة بالحروب مع تحديثات مباشرة.
   - يمكن أن يكون هذا القسم جذابًا بتقنية **JavaScript** للخرائط التفاعلية (مثل مكتبة Leaflet أو Google Maps).

5. **الأرشيف**:  
   - أرشيف للمقالات والتقارير القديمة.
   - يمكن تصنيفه حسب السنوات أو المواضيع.

6. **من نحن**:  
   - معلومات عن الفريق أو الجهة التي تدير الموقع.
   - الهدف: بناء ثقة المستخدمين بالمصدر.

7. **اتصل بنا**:  
   - صفحة تتيح للزوار إرسال استفساراتهم أو تقديم اقتراحاتهم.
   - يمكن إضافة نموذج تواصل بسيط.

8. **اللغات**:  
   - خيار لتغيير لغة الموقع إذا كان متعدد اللغات (مثلاً: العربية والإنجليزية).

---

### **مثال على شريط القوائم (Navigation Bar):**

#### الكود:
```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>مرصد الحروب</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
        }
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #333;
            padding: 10px 20px;
            color: white;
        }
        .navbar ul {
            list-style: none;
            display: flex;
            padding: 0;
            margin: 0;
        }
        .navbar ul li {
            margin: 0 15px;
        }
        .navbar ul li a {
            color: white;
            text-decoration: none;
            font-size: 16px;
        }
        .navbar ul li a:hover {
            color: #00b4d8;
        }
        .logo {
            font-size: 24px;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="logo">مرصد الحروب</div>
        <ul>
            <li><a href="#">الرئيسية</a></li>
            <li><a href="#">الأخبار والتقارير</a></li>
            <li><a href="#">الدراسات والأبحاث</a></li>
            <li><a href="#">الخرائط التفاعلية</a></li>
            <li><a href="#">الأرشيف</a></li>
            <li><a href="#">من نحن</a></li>
            <li><a href="#">اتصل بنا</a></li>
        </ul>
    </nav>
</body>
</html>
```

---

### **كيفية تحسين تجربة شريط القوائم:**
1. **إضافة أيقونات**:  
   - يمكن استخدام مكتبة **Font Awesome** لإضافة أيقونات بجانب الروابط.
   
   مثال:
   ```html
   <li><a href="#"><i class="fas fa-home"></i> الرئيسية</a></li>
   ```

2. **جعل الشريط ثابتًا (Sticky Navigation Bar):**
   - باستخدام CSS:
     ```css
     .navbar {
         position: sticky;
         top: 0;
         z-index: 1000;
     }
     ```

3. **إضافة شريط بحث (Search Bar):**
   - إذا كان الموقع يحتوي على محتوى كبير، شريط البحث سيكون مفيدًا جدًا.
   ```html
   <form>
       <input type="text" placeholder="ابحث هنا..." style="padding: 5px; border-radius: 5px;">
   </form>
   ```

4. **تصميم متجاوب (Responsive Design):**
   - باستخدام CSS Media Queries:
     ```css
     @media (max-width: 768px) {
         .navbar ul {
             flex-direction: column;
         }
         .navbar ul li {
             margin: 10px 0;
         }
     }
     ```

5. **إضافة خاصية الفتح والإغلاق (Hamburger Menu):**
   - لمستخدمي الجوال:
   ```html
   <style>
       .hamburger {
           display: none;
           font-size: 24px;
           cursor: pointer;
       }
       @media (max-width: 768px) {
           .hamburger {
               display: block;
           }
           .navbar ul {
               display: none;
               flex-direction: column;
           }
           .navbar ul.open {
               display: flex;
           }
       }
   </style>

   <div class="hamburger">☰</div>
   <script>
       const hamburger = document.querySelector(".hamburger");
       const menu = document.querySelector(".navbar ul");

       hamburger.addEventListener("click", () => {
           menu.classList.toggle("open");
       });
   </script>
   ```

---

### **خطوات إضافية:**
- استلهم من مواقع مشابهة لمعرفة كيفية تنظيم المعلومات.
- اجعل التصميم بسيطًا وسهل الاستخدام.
- أضف ملاحظات التحديثات (مثل أخبار عاجلة أو آخر التقارير) أعلى شريط القوائم لجذب الانتباه.